// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021010 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
namespace TestTask {
namespace Messages {
class FastResponse;
struct FastResponseDefaultTypeInternal;
extern FastResponseDefaultTypeInternal _FastResponse_default_instance_;
class RequestForFastResponse;
struct RequestForFastResponseDefaultTypeInternal;
extern RequestForFastResponseDefaultTypeInternal _RequestForFastResponse_default_instance_;
class RequestForSlowResponse;
struct RequestForSlowResponseDefaultTypeInternal;
extern RequestForSlowResponseDefaultTypeInternal _RequestForSlowResponse_default_instance_;
class SlowResponse;
struct SlowResponseDefaultTypeInternal;
extern SlowResponseDefaultTypeInternal _SlowResponse_default_instance_;
class WrapperMessage;
struct WrapperMessageDefaultTypeInternal;
extern WrapperMessageDefaultTypeInternal _WrapperMessage_default_instance_;
}  // namespace Messages
}  // namespace TestTask
PROTOBUF_NAMESPACE_OPEN
template<> ::TestTask::Messages::FastResponse* Arena::CreateMaybeMessage<::TestTask::Messages::FastResponse>(Arena*);
template<> ::TestTask::Messages::RequestForFastResponse* Arena::CreateMaybeMessage<::TestTask::Messages::RequestForFastResponse>(Arena*);
template<> ::TestTask::Messages::RequestForSlowResponse* Arena::CreateMaybeMessage<::TestTask::Messages::RequestForSlowResponse>(Arena*);
template<> ::TestTask::Messages::SlowResponse* Arena::CreateMaybeMessage<::TestTask::Messages::SlowResponse>(Arena*);
template<> ::TestTask::Messages::WrapperMessage* Arena::CreateMaybeMessage<::TestTask::Messages::WrapperMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TestTask {
namespace Messages {

// ===================================================================

class WrapperMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TestTask.Messages.WrapperMessage) */ {
 public:
  inline WrapperMessage() : WrapperMessage(nullptr) {}
  ~WrapperMessage() override;
  explicit PROTOBUF_CONSTEXPR WrapperMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WrapperMessage(const WrapperMessage& from);
  WrapperMessage(WrapperMessage&& from) noexcept
    : WrapperMessage() {
    *this = ::std::move(from);
  }

  inline WrapperMessage& operator=(const WrapperMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline WrapperMessage& operator=(WrapperMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WrapperMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const WrapperMessage* internal_default_instance() {
    return reinterpret_cast<const WrapperMessage*>(
               &_WrapperMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WrapperMessage& a, WrapperMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(WrapperMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WrapperMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WrapperMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WrapperMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WrapperMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WrapperMessage& from) {
    WrapperMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WrapperMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TestTask.Messages.WrapperMessage";
  }
  protected:
  explicit WrapperMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFastResponseFieldNumber = 1,
    kSlowResponseFieldNumber = 2,
    kRequestForFastResponseFieldNumber = 3,
    kRequestForSlowResponseFieldNumber = 4,
  };
  // optional .TestTask.Messages.FastResponse fast_response = 1;
  bool has_fast_response() const;
  private:
  bool _internal_has_fast_response() const;
  public:
  void clear_fast_response();
  const ::TestTask::Messages::FastResponse& fast_response() const;
  PROTOBUF_NODISCARD ::TestTask::Messages::FastResponse* release_fast_response();
  ::TestTask::Messages::FastResponse* mutable_fast_response();
  void set_allocated_fast_response(::TestTask::Messages::FastResponse* fast_response);
  private:
  const ::TestTask::Messages::FastResponse& _internal_fast_response() const;
  ::TestTask::Messages::FastResponse* _internal_mutable_fast_response();
  public:
  void unsafe_arena_set_allocated_fast_response(
      ::TestTask::Messages::FastResponse* fast_response);
  ::TestTask::Messages::FastResponse* unsafe_arena_release_fast_response();

  // optional .TestTask.Messages.SlowResponse slow_response = 2;
  bool has_slow_response() const;
  private:
  bool _internal_has_slow_response() const;
  public:
  void clear_slow_response();
  const ::TestTask::Messages::SlowResponse& slow_response() const;
  PROTOBUF_NODISCARD ::TestTask::Messages::SlowResponse* release_slow_response();
  ::TestTask::Messages::SlowResponse* mutable_slow_response();
  void set_allocated_slow_response(::TestTask::Messages::SlowResponse* slow_response);
  private:
  const ::TestTask::Messages::SlowResponse& _internal_slow_response() const;
  ::TestTask::Messages::SlowResponse* _internal_mutable_slow_response();
  public:
  void unsafe_arena_set_allocated_slow_response(
      ::TestTask::Messages::SlowResponse* slow_response);
  ::TestTask::Messages::SlowResponse* unsafe_arena_release_slow_response();

  // optional .TestTask.Messages.RequestForFastResponse request_for_fast_response = 3;
  bool has_request_for_fast_response() const;
  private:
  bool _internal_has_request_for_fast_response() const;
  public:
  void clear_request_for_fast_response();
  const ::TestTask::Messages::RequestForFastResponse& request_for_fast_response() const;
  PROTOBUF_NODISCARD ::TestTask::Messages::RequestForFastResponse* release_request_for_fast_response();
  ::TestTask::Messages::RequestForFastResponse* mutable_request_for_fast_response();
  void set_allocated_request_for_fast_response(::TestTask::Messages::RequestForFastResponse* request_for_fast_response);
  private:
  const ::TestTask::Messages::RequestForFastResponse& _internal_request_for_fast_response() const;
  ::TestTask::Messages::RequestForFastResponse* _internal_mutable_request_for_fast_response();
  public:
  void unsafe_arena_set_allocated_request_for_fast_response(
      ::TestTask::Messages::RequestForFastResponse* request_for_fast_response);
  ::TestTask::Messages::RequestForFastResponse* unsafe_arena_release_request_for_fast_response();

  // optional .TestTask.Messages.RequestForSlowResponse request_for_slow_response = 4;
  bool has_request_for_slow_response() const;
  private:
  bool _internal_has_request_for_slow_response() const;
  public:
  void clear_request_for_slow_response();
  const ::TestTask::Messages::RequestForSlowResponse& request_for_slow_response() const;
  PROTOBUF_NODISCARD ::TestTask::Messages::RequestForSlowResponse* release_request_for_slow_response();
  ::TestTask::Messages::RequestForSlowResponse* mutable_request_for_slow_response();
  void set_allocated_request_for_slow_response(::TestTask::Messages::RequestForSlowResponse* request_for_slow_response);
  private:
  const ::TestTask::Messages::RequestForSlowResponse& _internal_request_for_slow_response() const;
  ::TestTask::Messages::RequestForSlowResponse* _internal_mutable_request_for_slow_response();
  public:
  void unsafe_arena_set_allocated_request_for_slow_response(
      ::TestTask::Messages::RequestForSlowResponse* request_for_slow_response);
  ::TestTask::Messages::RequestForSlowResponse* unsafe_arena_release_request_for_slow_response();

  // @@protoc_insertion_point(class_scope:TestTask.Messages.WrapperMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TestTask::Messages::FastResponse* fast_response_;
    ::TestTask::Messages::SlowResponse* slow_response_;
    ::TestTask::Messages::RequestForFastResponse* request_for_fast_response_;
    ::TestTask::Messages::RequestForSlowResponse* request_for_slow_response_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class FastResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TestTask.Messages.FastResponse) */ {
 public:
  inline FastResponse() : FastResponse(nullptr) {}
  ~FastResponse() override;
  explicit PROTOBUF_CONSTEXPR FastResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FastResponse(const FastResponse& from);
  FastResponse(FastResponse&& from) noexcept
    : FastResponse() {
    *this = ::std::move(from);
  }

  inline FastResponse& operator=(const FastResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FastResponse& operator=(FastResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FastResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FastResponse* internal_default_instance() {
    return reinterpret_cast<const FastResponse*>(
               &_FastResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FastResponse& a, FastResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FastResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FastResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FastResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FastResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FastResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FastResponse& from) {
    FastResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FastResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TestTask.Messages.FastResponse";
  }
  protected:
  explicit FastResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentDateTimeFieldNumber = 1,
  };
  // required string current_date_time = 1;
  bool has_current_date_time() const;
  private:
  bool _internal_has_current_date_time() const;
  public:
  void clear_current_date_time();
  const std::string& current_date_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_current_date_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_current_date_time();
  PROTOBUF_NODISCARD std::string* release_current_date_time();
  void set_allocated_current_date_time(std::string* current_date_time);
  private:
  const std::string& _internal_current_date_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_current_date_time(const std::string& value);
  std::string* _internal_mutable_current_date_time();
  public:

  // @@protoc_insertion_point(class_scope:TestTask.Messages.FastResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr current_date_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class SlowResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TestTask.Messages.SlowResponse) */ {
 public:
  inline SlowResponse() : SlowResponse(nullptr) {}
  ~SlowResponse() override;
  explicit PROTOBUF_CONSTEXPR SlowResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SlowResponse(const SlowResponse& from);
  SlowResponse(SlowResponse&& from) noexcept
    : SlowResponse() {
    *this = ::std::move(from);
  }

  inline SlowResponse& operator=(const SlowResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlowResponse& operator=(SlowResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SlowResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SlowResponse* internal_default_instance() {
    return reinterpret_cast<const SlowResponse*>(
               &_SlowResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SlowResponse& a, SlowResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SlowResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SlowResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SlowResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SlowResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SlowResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SlowResponse& from) {
    SlowResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlowResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TestTask.Messages.SlowResponse";
  }
  protected:
  explicit SlowResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectedClientCountFieldNumber = 1,
  };
  // required uint32 connected_client_count = 1;
  bool has_connected_client_count() const;
  private:
  bool _internal_has_connected_client_count() const;
  public:
  void clear_connected_client_count();
  uint32_t connected_client_count() const;
  void set_connected_client_count(uint32_t value);
  private:
  uint32_t _internal_connected_client_count() const;
  void _internal_set_connected_client_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TestTask.Messages.SlowResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t connected_client_count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class RequestForFastResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:TestTask.Messages.RequestForFastResponse) */ {
 public:
  inline RequestForFastResponse() : RequestForFastResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR RequestForFastResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestForFastResponse(const RequestForFastResponse& from);
  RequestForFastResponse(RequestForFastResponse&& from) noexcept
    : RequestForFastResponse() {
    *this = ::std::move(from);
  }

  inline RequestForFastResponse& operator=(const RequestForFastResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestForFastResponse& operator=(RequestForFastResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestForFastResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestForFastResponse* internal_default_instance() {
    return reinterpret_cast<const RequestForFastResponse*>(
               &_RequestForFastResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RequestForFastResponse& a, RequestForFastResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestForFastResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestForFastResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestForFastResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestForFastResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RequestForFastResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RequestForFastResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TestTask.Messages.RequestForFastResponse";
  }
  protected:
  explicit RequestForFastResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:TestTask.Messages.RequestForFastResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class RequestForSlowResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TestTask.Messages.RequestForSlowResponse) */ {
 public:
  inline RequestForSlowResponse() : RequestForSlowResponse(nullptr) {}
  ~RequestForSlowResponse() override;
  explicit PROTOBUF_CONSTEXPR RequestForSlowResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestForSlowResponse(const RequestForSlowResponse& from);
  RequestForSlowResponse(RequestForSlowResponse&& from) noexcept
    : RequestForSlowResponse() {
    *this = ::std::move(from);
  }

  inline RequestForSlowResponse& operator=(const RequestForSlowResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestForSlowResponse& operator=(RequestForSlowResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestForSlowResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestForSlowResponse* internal_default_instance() {
    return reinterpret_cast<const RequestForSlowResponse*>(
               &_RequestForSlowResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RequestForSlowResponse& a, RequestForSlowResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestForSlowResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestForSlowResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestForSlowResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestForSlowResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestForSlowResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequestForSlowResponse& from) {
    RequestForSlowResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestForSlowResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TestTask.Messages.RequestForSlowResponse";
  }
  protected:
  explicit RequestForSlowResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeInSecondsToSleepFieldNumber = 1,
  };
  // required uint32 time_in_seconds_to_sleep = 1;
  bool has_time_in_seconds_to_sleep() const;
  private:
  bool _internal_has_time_in_seconds_to_sleep() const;
  public:
  void clear_time_in_seconds_to_sleep();
  uint32_t time_in_seconds_to_sleep() const;
  void set_time_in_seconds_to_sleep(uint32_t value);
  private:
  uint32_t _internal_time_in_seconds_to_sleep() const;
  void _internal_set_time_in_seconds_to_sleep(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TestTask.Messages.RequestForSlowResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t time_in_seconds_to_sleep_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WrapperMessage

// optional .TestTask.Messages.FastResponse fast_response = 1;
inline bool WrapperMessage::_internal_has_fast_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fast_response_ != nullptr);
  return value;
}
inline bool WrapperMessage::has_fast_response() const {
  return _internal_has_fast_response();
}
inline void WrapperMessage::clear_fast_response() {
  if (_impl_.fast_response_ != nullptr) _impl_.fast_response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TestTask::Messages::FastResponse& WrapperMessage::_internal_fast_response() const {
  const ::TestTask::Messages::FastResponse* p = _impl_.fast_response_;
  return p != nullptr ? *p : reinterpret_cast<const ::TestTask::Messages::FastResponse&>(
      ::TestTask::Messages::_FastResponse_default_instance_);
}
inline const ::TestTask::Messages::FastResponse& WrapperMessage::fast_response() const {
  // @@protoc_insertion_point(field_get:TestTask.Messages.WrapperMessage.fast_response)
  return _internal_fast_response();
}
inline void WrapperMessage::unsafe_arena_set_allocated_fast_response(
    ::TestTask::Messages::FastResponse* fast_response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fast_response_);
  }
  _impl_.fast_response_ = fast_response;
  if (fast_response) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TestTask.Messages.WrapperMessage.fast_response)
}
inline ::TestTask::Messages::FastResponse* WrapperMessage::release_fast_response() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TestTask::Messages::FastResponse* temp = _impl_.fast_response_;
  _impl_.fast_response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TestTask::Messages::FastResponse* WrapperMessage::unsafe_arena_release_fast_response() {
  // @@protoc_insertion_point(field_release:TestTask.Messages.WrapperMessage.fast_response)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TestTask::Messages::FastResponse* temp = _impl_.fast_response_;
  _impl_.fast_response_ = nullptr;
  return temp;
}
inline ::TestTask::Messages::FastResponse* WrapperMessage::_internal_mutable_fast_response() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.fast_response_ == nullptr) {
    auto* p = CreateMaybeMessage<::TestTask::Messages::FastResponse>(GetArenaForAllocation());
    _impl_.fast_response_ = p;
  }
  return _impl_.fast_response_;
}
inline ::TestTask::Messages::FastResponse* WrapperMessage::mutable_fast_response() {
  ::TestTask::Messages::FastResponse* _msg = _internal_mutable_fast_response();
  // @@protoc_insertion_point(field_mutable:TestTask.Messages.WrapperMessage.fast_response)
  return _msg;
}
inline void WrapperMessage::set_allocated_fast_response(::TestTask::Messages::FastResponse* fast_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.fast_response_;
  }
  if (fast_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fast_response);
    if (message_arena != submessage_arena) {
      fast_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fast_response, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.fast_response_ = fast_response;
  // @@protoc_insertion_point(field_set_allocated:TestTask.Messages.WrapperMessage.fast_response)
}

// optional .TestTask.Messages.SlowResponse slow_response = 2;
inline bool WrapperMessage::_internal_has_slow_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.slow_response_ != nullptr);
  return value;
}
inline bool WrapperMessage::has_slow_response() const {
  return _internal_has_slow_response();
}
inline void WrapperMessage::clear_slow_response() {
  if (_impl_.slow_response_ != nullptr) _impl_.slow_response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::TestTask::Messages::SlowResponse& WrapperMessage::_internal_slow_response() const {
  const ::TestTask::Messages::SlowResponse* p = _impl_.slow_response_;
  return p != nullptr ? *p : reinterpret_cast<const ::TestTask::Messages::SlowResponse&>(
      ::TestTask::Messages::_SlowResponse_default_instance_);
}
inline const ::TestTask::Messages::SlowResponse& WrapperMessage::slow_response() const {
  // @@protoc_insertion_point(field_get:TestTask.Messages.WrapperMessage.slow_response)
  return _internal_slow_response();
}
inline void WrapperMessage::unsafe_arena_set_allocated_slow_response(
    ::TestTask::Messages::SlowResponse* slow_response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slow_response_);
  }
  _impl_.slow_response_ = slow_response;
  if (slow_response) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TestTask.Messages.WrapperMessage.slow_response)
}
inline ::TestTask::Messages::SlowResponse* WrapperMessage::release_slow_response() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TestTask::Messages::SlowResponse* temp = _impl_.slow_response_;
  _impl_.slow_response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TestTask::Messages::SlowResponse* WrapperMessage::unsafe_arena_release_slow_response() {
  // @@protoc_insertion_point(field_release:TestTask.Messages.WrapperMessage.slow_response)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TestTask::Messages::SlowResponse* temp = _impl_.slow_response_;
  _impl_.slow_response_ = nullptr;
  return temp;
}
inline ::TestTask::Messages::SlowResponse* WrapperMessage::_internal_mutable_slow_response() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.slow_response_ == nullptr) {
    auto* p = CreateMaybeMessage<::TestTask::Messages::SlowResponse>(GetArenaForAllocation());
    _impl_.slow_response_ = p;
  }
  return _impl_.slow_response_;
}
inline ::TestTask::Messages::SlowResponse* WrapperMessage::mutable_slow_response() {
  ::TestTask::Messages::SlowResponse* _msg = _internal_mutable_slow_response();
  // @@protoc_insertion_point(field_mutable:TestTask.Messages.WrapperMessage.slow_response)
  return _msg;
}
inline void WrapperMessage::set_allocated_slow_response(::TestTask::Messages::SlowResponse* slow_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.slow_response_;
  }
  if (slow_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(slow_response);
    if (message_arena != submessage_arena) {
      slow_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slow_response, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.slow_response_ = slow_response;
  // @@protoc_insertion_point(field_set_allocated:TestTask.Messages.WrapperMessage.slow_response)
}

// optional .TestTask.Messages.RequestForFastResponse request_for_fast_response = 3;
inline bool WrapperMessage::_internal_has_request_for_fast_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.request_for_fast_response_ != nullptr);
  return value;
}
inline bool WrapperMessage::has_request_for_fast_response() const {
  return _internal_has_request_for_fast_response();
}
inline void WrapperMessage::clear_request_for_fast_response() {
  if (_impl_.request_for_fast_response_ != nullptr) _impl_.request_for_fast_response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::TestTask::Messages::RequestForFastResponse& WrapperMessage::_internal_request_for_fast_response() const {
  const ::TestTask::Messages::RequestForFastResponse* p = _impl_.request_for_fast_response_;
  return p != nullptr ? *p : reinterpret_cast<const ::TestTask::Messages::RequestForFastResponse&>(
      ::TestTask::Messages::_RequestForFastResponse_default_instance_);
}
inline const ::TestTask::Messages::RequestForFastResponse& WrapperMessage::request_for_fast_response() const {
  // @@protoc_insertion_point(field_get:TestTask.Messages.WrapperMessage.request_for_fast_response)
  return _internal_request_for_fast_response();
}
inline void WrapperMessage::unsafe_arena_set_allocated_request_for_fast_response(
    ::TestTask::Messages::RequestForFastResponse* request_for_fast_response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.request_for_fast_response_);
  }
  _impl_.request_for_fast_response_ = request_for_fast_response;
  if (request_for_fast_response) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TestTask.Messages.WrapperMessage.request_for_fast_response)
}
inline ::TestTask::Messages::RequestForFastResponse* WrapperMessage::release_request_for_fast_response() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TestTask::Messages::RequestForFastResponse* temp = _impl_.request_for_fast_response_;
  _impl_.request_for_fast_response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TestTask::Messages::RequestForFastResponse* WrapperMessage::unsafe_arena_release_request_for_fast_response() {
  // @@protoc_insertion_point(field_release:TestTask.Messages.WrapperMessage.request_for_fast_response)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TestTask::Messages::RequestForFastResponse* temp = _impl_.request_for_fast_response_;
  _impl_.request_for_fast_response_ = nullptr;
  return temp;
}
inline ::TestTask::Messages::RequestForFastResponse* WrapperMessage::_internal_mutable_request_for_fast_response() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.request_for_fast_response_ == nullptr) {
    auto* p = CreateMaybeMessage<::TestTask::Messages::RequestForFastResponse>(GetArenaForAllocation());
    _impl_.request_for_fast_response_ = p;
  }
  return _impl_.request_for_fast_response_;
}
inline ::TestTask::Messages::RequestForFastResponse* WrapperMessage::mutable_request_for_fast_response() {
  ::TestTask::Messages::RequestForFastResponse* _msg = _internal_mutable_request_for_fast_response();
  // @@protoc_insertion_point(field_mutable:TestTask.Messages.WrapperMessage.request_for_fast_response)
  return _msg;
}
inline void WrapperMessage::set_allocated_request_for_fast_response(::TestTask::Messages::RequestForFastResponse* request_for_fast_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.request_for_fast_response_;
  }
  if (request_for_fast_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(request_for_fast_response);
    if (message_arena != submessage_arena) {
      request_for_fast_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_for_fast_response, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.request_for_fast_response_ = request_for_fast_response;
  // @@protoc_insertion_point(field_set_allocated:TestTask.Messages.WrapperMessage.request_for_fast_response)
}

// optional .TestTask.Messages.RequestForSlowResponse request_for_slow_response = 4;
inline bool WrapperMessage::_internal_has_request_for_slow_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.request_for_slow_response_ != nullptr);
  return value;
}
inline bool WrapperMessage::has_request_for_slow_response() const {
  return _internal_has_request_for_slow_response();
}
inline void WrapperMessage::clear_request_for_slow_response() {
  if (_impl_.request_for_slow_response_ != nullptr) _impl_.request_for_slow_response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::TestTask::Messages::RequestForSlowResponse& WrapperMessage::_internal_request_for_slow_response() const {
  const ::TestTask::Messages::RequestForSlowResponse* p = _impl_.request_for_slow_response_;
  return p != nullptr ? *p : reinterpret_cast<const ::TestTask::Messages::RequestForSlowResponse&>(
      ::TestTask::Messages::_RequestForSlowResponse_default_instance_);
}
inline const ::TestTask::Messages::RequestForSlowResponse& WrapperMessage::request_for_slow_response() const {
  // @@protoc_insertion_point(field_get:TestTask.Messages.WrapperMessage.request_for_slow_response)
  return _internal_request_for_slow_response();
}
inline void WrapperMessage::unsafe_arena_set_allocated_request_for_slow_response(
    ::TestTask::Messages::RequestForSlowResponse* request_for_slow_response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.request_for_slow_response_);
  }
  _impl_.request_for_slow_response_ = request_for_slow_response;
  if (request_for_slow_response) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TestTask.Messages.WrapperMessage.request_for_slow_response)
}
inline ::TestTask::Messages::RequestForSlowResponse* WrapperMessage::release_request_for_slow_response() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TestTask::Messages::RequestForSlowResponse* temp = _impl_.request_for_slow_response_;
  _impl_.request_for_slow_response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TestTask::Messages::RequestForSlowResponse* WrapperMessage::unsafe_arena_release_request_for_slow_response() {
  // @@protoc_insertion_point(field_release:TestTask.Messages.WrapperMessage.request_for_slow_response)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TestTask::Messages::RequestForSlowResponse* temp = _impl_.request_for_slow_response_;
  _impl_.request_for_slow_response_ = nullptr;
  return temp;
}
inline ::TestTask::Messages::RequestForSlowResponse* WrapperMessage::_internal_mutable_request_for_slow_response() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.request_for_slow_response_ == nullptr) {
    auto* p = CreateMaybeMessage<::TestTask::Messages::RequestForSlowResponse>(GetArenaForAllocation());
    _impl_.request_for_slow_response_ = p;
  }
  return _impl_.request_for_slow_response_;
}
inline ::TestTask::Messages::RequestForSlowResponse* WrapperMessage::mutable_request_for_slow_response() {
  ::TestTask::Messages::RequestForSlowResponse* _msg = _internal_mutable_request_for_slow_response();
  // @@protoc_insertion_point(field_mutable:TestTask.Messages.WrapperMessage.request_for_slow_response)
  return _msg;
}
inline void WrapperMessage::set_allocated_request_for_slow_response(::TestTask::Messages::RequestForSlowResponse* request_for_slow_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.request_for_slow_response_;
  }
  if (request_for_slow_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(request_for_slow_response);
    if (message_arena != submessage_arena) {
      request_for_slow_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_for_slow_response, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.request_for_slow_response_ = request_for_slow_response;
  // @@protoc_insertion_point(field_set_allocated:TestTask.Messages.WrapperMessage.request_for_slow_response)
}

// -------------------------------------------------------------------

// FastResponse

// required string current_date_time = 1;
inline bool FastResponse::_internal_has_current_date_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FastResponse::has_current_date_time() const {
  return _internal_has_current_date_time();
}
inline void FastResponse::clear_current_date_time() {
  _impl_.current_date_time_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FastResponse::current_date_time() const {
  // @@protoc_insertion_point(field_get:TestTask.Messages.FastResponse.current_date_time)
  return _internal_current_date_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FastResponse::set_current_date_time(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.current_date_time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TestTask.Messages.FastResponse.current_date_time)
}
inline std::string* FastResponse::mutable_current_date_time() {
  std::string* _s = _internal_mutable_current_date_time();
  // @@protoc_insertion_point(field_mutable:TestTask.Messages.FastResponse.current_date_time)
  return _s;
}
inline const std::string& FastResponse::_internal_current_date_time() const {
  return _impl_.current_date_time_.Get();
}
inline void FastResponse::_internal_set_current_date_time(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.current_date_time_.Set(value, GetArenaForAllocation());
}
inline std::string* FastResponse::_internal_mutable_current_date_time() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.current_date_time_.Mutable(GetArenaForAllocation());
}
inline std::string* FastResponse::release_current_date_time() {
  // @@protoc_insertion_point(field_release:TestTask.Messages.FastResponse.current_date_time)
  if (!_internal_has_current_date_time()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.current_date_time_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.current_date_time_.IsDefault()) {
    _impl_.current_date_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FastResponse::set_allocated_current_date_time(std::string* current_date_time) {
  if (current_date_time != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.current_date_time_.SetAllocated(current_date_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.current_date_time_.IsDefault()) {
    _impl_.current_date_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TestTask.Messages.FastResponse.current_date_time)
}

// -------------------------------------------------------------------

// SlowResponse

// required uint32 connected_client_count = 1;
inline bool SlowResponse::_internal_has_connected_client_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SlowResponse::has_connected_client_count() const {
  return _internal_has_connected_client_count();
}
inline void SlowResponse::clear_connected_client_count() {
  _impl_.connected_client_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t SlowResponse::_internal_connected_client_count() const {
  return _impl_.connected_client_count_;
}
inline uint32_t SlowResponse::connected_client_count() const {
  // @@protoc_insertion_point(field_get:TestTask.Messages.SlowResponse.connected_client_count)
  return _internal_connected_client_count();
}
inline void SlowResponse::_internal_set_connected_client_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.connected_client_count_ = value;
}
inline void SlowResponse::set_connected_client_count(uint32_t value) {
  _internal_set_connected_client_count(value);
  // @@protoc_insertion_point(field_set:TestTask.Messages.SlowResponse.connected_client_count)
}

// -------------------------------------------------------------------

// RequestForFastResponse

// -------------------------------------------------------------------

// RequestForSlowResponse

// required uint32 time_in_seconds_to_sleep = 1;
inline bool RequestForSlowResponse::_internal_has_time_in_seconds_to_sleep() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RequestForSlowResponse::has_time_in_seconds_to_sleep() const {
  return _internal_has_time_in_seconds_to_sleep();
}
inline void RequestForSlowResponse::clear_time_in_seconds_to_sleep() {
  _impl_.time_in_seconds_to_sleep_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t RequestForSlowResponse::_internal_time_in_seconds_to_sleep() const {
  return _impl_.time_in_seconds_to_sleep_;
}
inline uint32_t RequestForSlowResponse::time_in_seconds_to_sleep() const {
  // @@protoc_insertion_point(field_get:TestTask.Messages.RequestForSlowResponse.time_in_seconds_to_sleep)
  return _internal_time_in_seconds_to_sleep();
}
inline void RequestForSlowResponse::_internal_set_time_in_seconds_to_sleep(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.time_in_seconds_to_sleep_ = value;
}
inline void RequestForSlowResponse::set_time_in_seconds_to_sleep(uint32_t value) {
  _internal_set_time_in_seconds_to_sleep(value);
  // @@protoc_insertion_point(field_set:TestTask.Messages.RequestForSlowResponse.time_in_seconds_to_sleep)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Messages
}  // namespace TestTask

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
