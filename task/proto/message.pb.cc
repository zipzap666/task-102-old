// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace TestTask {
namespace Messages {
PROTOBUF_CONSTEXPR WrapperMessage::WrapperMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.fast_response_)*/nullptr
  , /*decltype(_impl_.slow_response_)*/nullptr
  , /*decltype(_impl_.request_for_fast_response_)*/nullptr
  , /*decltype(_impl_.request_for_slow_response_)*/nullptr} {}
struct WrapperMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WrapperMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WrapperMessageDefaultTypeInternal() {}
  union {
    WrapperMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WrapperMessageDefaultTypeInternal _WrapperMessage_default_instance_;
PROTOBUF_CONSTEXPR FastResponse::FastResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.current_date_time_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct FastResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FastResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FastResponseDefaultTypeInternal() {}
  union {
    FastResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FastResponseDefaultTypeInternal _FastResponse_default_instance_;
PROTOBUF_CONSTEXPR SlowResponse::SlowResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.connected_client_count_)*/0u} {}
struct SlowResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SlowResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SlowResponseDefaultTypeInternal() {}
  union {
    SlowResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SlowResponseDefaultTypeInternal _SlowResponse_default_instance_;
PROTOBUF_CONSTEXPR RequestForFastResponse::RequestForFastResponse(
    ::_pbi::ConstantInitialized) {}
struct RequestForFastResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestForFastResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestForFastResponseDefaultTypeInternal() {}
  union {
    RequestForFastResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestForFastResponseDefaultTypeInternal _RequestForFastResponse_default_instance_;
PROTOBUF_CONSTEXPR RequestForSlowResponse::RequestForSlowResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.time_in_seconds_to_sleep_)*/0u} {}
struct RequestForSlowResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestForSlowResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestForSlowResponseDefaultTypeInternal() {}
  union {
    RequestForSlowResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestForSlowResponseDefaultTypeInternal _RequestForSlowResponse_default_instance_;
}  // namespace Messages
}  // namespace TestTask
static ::_pb::Metadata file_level_metadata_message_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_message_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_message_2eproto = nullptr;

const uint32_t TableStruct_message_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TestTask::Messages::WrapperMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TestTask::Messages::WrapperMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TestTask::Messages::WrapperMessage, _impl_.fast_response_),
  PROTOBUF_FIELD_OFFSET(::TestTask::Messages::WrapperMessage, _impl_.slow_response_),
  PROTOBUF_FIELD_OFFSET(::TestTask::Messages::WrapperMessage, _impl_.request_for_fast_response_),
  PROTOBUF_FIELD_OFFSET(::TestTask::Messages::WrapperMessage, _impl_.request_for_slow_response_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TestTask::Messages::FastResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TestTask::Messages::FastResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TestTask::Messages::FastResponse, _impl_.current_date_time_),
  0,
  PROTOBUF_FIELD_OFFSET(::TestTask::Messages::SlowResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TestTask::Messages::SlowResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TestTask::Messages::SlowResponse, _impl_.connected_client_count_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TestTask::Messages::RequestForFastResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TestTask::Messages::RequestForSlowResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TestTask::Messages::RequestForSlowResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TestTask::Messages::RequestForSlowResponse, _impl_.time_in_seconds_to_sleep_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::TestTask::Messages::WrapperMessage)},
  { 14, 21, -1, sizeof(::TestTask::Messages::FastResponse)},
  { 22, 29, -1, sizeof(::TestTask::Messages::SlowResponse)},
  { 30, -1, -1, sizeof(::TestTask::Messages::RequestForFastResponse)},
  { 36, 43, -1, sizeof(::TestTask::Messages::RequestForSlowResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::TestTask::Messages::_WrapperMessage_default_instance_._instance,
  &::TestTask::Messages::_FastResponse_default_instance_._instance,
  &::TestTask::Messages::_SlowResponse_default_instance_._instance,
  &::TestTask::Messages::_RequestForFastResponse_default_instance_._instance,
  &::TestTask::Messages::_RequestForSlowResponse_default_instance_._instance,
};

const char descriptor_table_protodef_message_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmessage.proto\022\021TestTask.Messages\"\234\002\n\016W"
  "rapperMessage\0226\n\rfast_response\030\001 \001(\0132\037.T"
  "estTask.Messages.FastResponse\0226\n\rslow_re"
  "sponse\030\002 \001(\0132\037.TestTask.Messages.SlowRes"
  "ponse\022L\n\031request_for_fast_response\030\003 \001(\013"
  "2).TestTask.Messages.RequestForFastRespo"
  "nse\022L\n\031request_for_slow_response\030\004 \001(\0132)"
  ".TestTask.Messages.RequestForSlowRespons"
  "e\")\n\014FastResponse\022\031\n\021current_date_time\030\001"
  " \002(\t\".\n\014SlowResponse\022\036\n\026connected_client"
  "_count\030\001 \002(\r\"\030\n\026RequestForFastResponse\":"
  "\n\026RequestForSlowResponse\022 \n\030time_in_seco"
  "nds_to_sleep\030\001 \002(\r"
  ;
static ::_pbi::once_flag descriptor_table_message_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_message_2eproto = {
    false, false, 498, descriptor_table_protodef_message_2eproto,
    "message.proto",
    &descriptor_table_message_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_message_2eproto::offsets,
    file_level_metadata_message_2eproto, file_level_enum_descriptors_message_2eproto,
    file_level_service_descriptors_message_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_message_2eproto_getter() {
  return &descriptor_table_message_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_message_2eproto(&descriptor_table_message_2eproto);
namespace TestTask {
namespace Messages {

// ===================================================================

class WrapperMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<WrapperMessage>()._impl_._has_bits_);
  static const ::TestTask::Messages::FastResponse& fast_response(const WrapperMessage* msg);
  static void set_has_fast_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TestTask::Messages::SlowResponse& slow_response(const WrapperMessage* msg);
  static void set_has_slow_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TestTask::Messages::RequestForFastResponse& request_for_fast_response(const WrapperMessage* msg);
  static void set_has_request_for_fast_response(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TestTask::Messages::RequestForSlowResponse& request_for_slow_response(const WrapperMessage* msg);
  static void set_has_request_for_slow_response(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TestTask::Messages::FastResponse&
WrapperMessage::_Internal::fast_response(const WrapperMessage* msg) {
  return *msg->_impl_.fast_response_;
}
const ::TestTask::Messages::SlowResponse&
WrapperMessage::_Internal::slow_response(const WrapperMessage* msg) {
  return *msg->_impl_.slow_response_;
}
const ::TestTask::Messages::RequestForFastResponse&
WrapperMessage::_Internal::request_for_fast_response(const WrapperMessage* msg) {
  return *msg->_impl_.request_for_fast_response_;
}
const ::TestTask::Messages::RequestForSlowResponse&
WrapperMessage::_Internal::request_for_slow_response(const WrapperMessage* msg) {
  return *msg->_impl_.request_for_slow_response_;
}
WrapperMessage::WrapperMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TestTask.Messages.WrapperMessage)
}
WrapperMessage::WrapperMessage(const WrapperMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WrapperMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fast_response_){nullptr}
    , decltype(_impl_.slow_response_){nullptr}
    , decltype(_impl_.request_for_fast_response_){nullptr}
    , decltype(_impl_.request_for_slow_response_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fast_response()) {
    _this->_impl_.fast_response_ = new ::TestTask::Messages::FastResponse(*from._impl_.fast_response_);
  }
  if (from._internal_has_slow_response()) {
    _this->_impl_.slow_response_ = new ::TestTask::Messages::SlowResponse(*from._impl_.slow_response_);
  }
  if (from._internal_has_request_for_fast_response()) {
    _this->_impl_.request_for_fast_response_ = new ::TestTask::Messages::RequestForFastResponse(*from._impl_.request_for_fast_response_);
  }
  if (from._internal_has_request_for_slow_response()) {
    _this->_impl_.request_for_slow_response_ = new ::TestTask::Messages::RequestForSlowResponse(*from._impl_.request_for_slow_response_);
  }
  // @@protoc_insertion_point(copy_constructor:TestTask.Messages.WrapperMessage)
}

inline void WrapperMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fast_response_){nullptr}
    , decltype(_impl_.slow_response_){nullptr}
    , decltype(_impl_.request_for_fast_response_){nullptr}
    , decltype(_impl_.request_for_slow_response_){nullptr}
  };
}

WrapperMessage::~WrapperMessage() {
  // @@protoc_insertion_point(destructor:TestTask.Messages.WrapperMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WrapperMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.fast_response_;
  if (this != internal_default_instance()) delete _impl_.slow_response_;
  if (this != internal_default_instance()) delete _impl_.request_for_fast_response_;
  if (this != internal_default_instance()) delete _impl_.request_for_slow_response_;
}

void WrapperMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WrapperMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:TestTask.Messages.WrapperMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.fast_response_ != nullptr);
      _impl_.fast_response_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.slow_response_ != nullptr);
      _impl_.slow_response_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.request_for_fast_response_ != nullptr);
      _impl_.request_for_fast_response_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.request_for_slow_response_ != nullptr);
      _impl_.request_for_slow_response_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WrapperMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TestTask.Messages.FastResponse fast_response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fast_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TestTask.Messages.SlowResponse slow_response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slow_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TestTask.Messages.RequestForFastResponse request_for_fast_response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_request_for_fast_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TestTask.Messages.RequestForSlowResponse request_for_slow_response = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_request_for_slow_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WrapperMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TestTask.Messages.WrapperMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TestTask.Messages.FastResponse fast_response = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::fast_response(this),
        _Internal::fast_response(this).GetCachedSize(), target, stream);
  }

  // optional .TestTask.Messages.SlowResponse slow_response = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::slow_response(this),
        _Internal::slow_response(this).GetCachedSize(), target, stream);
  }

  // optional .TestTask.Messages.RequestForFastResponse request_for_fast_response = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::request_for_fast_response(this),
        _Internal::request_for_fast_response(this).GetCachedSize(), target, stream);
  }

  // optional .TestTask.Messages.RequestForSlowResponse request_for_slow_response = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::request_for_slow_response(this),
        _Internal::request_for_slow_response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TestTask.Messages.WrapperMessage)
  return target;
}

size_t WrapperMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TestTask.Messages.WrapperMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TestTask.Messages.FastResponse fast_response = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.fast_response_);
    }

    // optional .TestTask.Messages.SlowResponse slow_response = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.slow_response_);
    }

    // optional .TestTask.Messages.RequestForFastResponse request_for_fast_response = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_for_fast_response_);
    }

    // optional .TestTask.Messages.RequestForSlowResponse request_for_slow_response = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_for_slow_response_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WrapperMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WrapperMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WrapperMessage::GetClassData() const { return &_class_data_; }


void WrapperMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WrapperMessage*>(&to_msg);
  auto& from = static_cast<const WrapperMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TestTask.Messages.WrapperMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_fast_response()->::TestTask::Messages::FastResponse::MergeFrom(
          from._internal_fast_response());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_slow_response()->::TestTask::Messages::SlowResponse::MergeFrom(
          from._internal_slow_response());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_request_for_fast_response()->::TestTask::Messages::RequestForFastResponse::MergeFrom(
          from._internal_request_for_fast_response());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_request_for_slow_response()->::TestTask::Messages::RequestForSlowResponse::MergeFrom(
          from._internal_request_for_slow_response());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WrapperMessage::CopyFrom(const WrapperMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TestTask.Messages.WrapperMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WrapperMessage::IsInitialized() const {
  if (_internal_has_fast_response()) {
    if (!_impl_.fast_response_->IsInitialized()) return false;
  }
  if (_internal_has_slow_response()) {
    if (!_impl_.slow_response_->IsInitialized()) return false;
  }
  if (_internal_has_request_for_slow_response()) {
    if (!_impl_.request_for_slow_response_->IsInitialized()) return false;
  }
  return true;
}

void WrapperMessage::InternalSwap(WrapperMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WrapperMessage, _impl_.request_for_slow_response_)
      + sizeof(WrapperMessage::_impl_.request_for_slow_response_)
      - PROTOBUF_FIELD_OFFSET(WrapperMessage, _impl_.fast_response_)>(
          reinterpret_cast<char*>(&_impl_.fast_response_),
          reinterpret_cast<char*>(&other->_impl_.fast_response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WrapperMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[0]);
}

// ===================================================================

class FastResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<FastResponse>()._impl_._has_bits_);
  static void set_has_current_date_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

FastResponse::FastResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TestTask.Messages.FastResponse)
}
FastResponse::FastResponse(const FastResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FastResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.current_date_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.current_date_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.current_date_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_current_date_time()) {
    _this->_impl_.current_date_time_.Set(from._internal_current_date_time(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TestTask.Messages.FastResponse)
}

inline void FastResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.current_date_time_){}
  };
  _impl_.current_date_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.current_date_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FastResponse::~FastResponse() {
  // @@protoc_insertion_point(destructor:TestTask.Messages.FastResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FastResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.current_date_time_.Destroy();
}

void FastResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FastResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:TestTask.Messages.FastResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.current_date_time_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FastResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string current_date_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_current_date_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TestTask.Messages.FastResponse.current_date_time");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FastResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TestTask.Messages.FastResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string current_date_time = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_current_date_time().data(), static_cast<int>(this->_internal_current_date_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TestTask.Messages.FastResponse.current_date_time");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_current_date_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TestTask.Messages.FastResponse)
  return target;
}

size_t FastResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TestTask.Messages.FastResponse)
  size_t total_size = 0;

  // required string current_date_time = 1;
  if (_internal_has_current_date_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_current_date_time());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FastResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FastResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FastResponse::GetClassData() const { return &_class_data_; }


void FastResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FastResponse*>(&to_msg);
  auto& from = static_cast<const FastResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TestTask.Messages.FastResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_current_date_time()) {
    _this->_internal_set_current_date_time(from._internal_current_date_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FastResponse::CopyFrom(const FastResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TestTask.Messages.FastResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void FastResponse::InternalSwap(FastResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.current_date_time_, lhs_arena,
      &other->_impl_.current_date_time_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FastResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[1]);
}

// ===================================================================

class SlowResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SlowResponse>()._impl_._has_bits_);
  static void set_has_connected_client_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SlowResponse::SlowResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TestTask.Messages.SlowResponse)
}
SlowResponse::SlowResponse(const SlowResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SlowResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.connected_client_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.connected_client_count_ = from._impl_.connected_client_count_;
  // @@protoc_insertion_point(copy_constructor:TestTask.Messages.SlowResponse)
}

inline void SlowResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.connected_client_count_){0u}
  };
}

SlowResponse::~SlowResponse() {
  // @@protoc_insertion_point(destructor:TestTask.Messages.SlowResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SlowResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SlowResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SlowResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:TestTask.Messages.SlowResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.connected_client_count_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlowResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 connected_client_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_connected_client_count(&has_bits);
          _impl_.connected_client_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SlowResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TestTask.Messages.SlowResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 connected_client_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_connected_client_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TestTask.Messages.SlowResponse)
  return target;
}

size_t SlowResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TestTask.Messages.SlowResponse)
  size_t total_size = 0;

  // required uint32 connected_client_count = 1;
  if (_internal_has_connected_client_count()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_connected_client_count());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SlowResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SlowResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SlowResponse::GetClassData() const { return &_class_data_; }


void SlowResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SlowResponse*>(&to_msg);
  auto& from = static_cast<const SlowResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TestTask.Messages.SlowResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_connected_client_count()) {
    _this->_internal_set_connected_client_count(from._internal_connected_client_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SlowResponse::CopyFrom(const SlowResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TestTask.Messages.SlowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlowResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SlowResponse::InternalSwap(SlowResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.connected_client_count_, other->_impl_.connected_client_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SlowResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[2]);
}

// ===================================================================

class RequestForFastResponse::_Internal {
 public:
};

RequestForFastResponse::RequestForFastResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:TestTask.Messages.RequestForFastResponse)
}
RequestForFastResponse::RequestForFastResponse(const RequestForFastResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  RequestForFastResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TestTask.Messages.RequestForFastResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestForFastResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestForFastResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RequestForFastResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[3]);
}

// ===================================================================

class RequestForSlowResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<RequestForSlowResponse>()._impl_._has_bits_);
  static void set_has_time_in_seconds_to_sleep(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

RequestForSlowResponse::RequestForSlowResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TestTask.Messages.RequestForSlowResponse)
}
RequestForSlowResponse::RequestForSlowResponse(const RequestForSlowResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestForSlowResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.time_in_seconds_to_sleep_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.time_in_seconds_to_sleep_ = from._impl_.time_in_seconds_to_sleep_;
  // @@protoc_insertion_point(copy_constructor:TestTask.Messages.RequestForSlowResponse)
}

inline void RequestForSlowResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.time_in_seconds_to_sleep_){0u}
  };
}

RequestForSlowResponse::~RequestForSlowResponse() {
  // @@protoc_insertion_point(destructor:TestTask.Messages.RequestForSlowResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestForSlowResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestForSlowResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestForSlowResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:TestTask.Messages.RequestForSlowResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.time_in_seconds_to_sleep_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestForSlowResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 time_in_seconds_to_sleep = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_time_in_seconds_to_sleep(&has_bits);
          _impl_.time_in_seconds_to_sleep_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestForSlowResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TestTask.Messages.RequestForSlowResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 time_in_seconds_to_sleep = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_time_in_seconds_to_sleep(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TestTask.Messages.RequestForSlowResponse)
  return target;
}

size_t RequestForSlowResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TestTask.Messages.RequestForSlowResponse)
  size_t total_size = 0;

  // required uint32 time_in_seconds_to_sleep = 1;
  if (_internal_has_time_in_seconds_to_sleep()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_time_in_seconds_to_sleep());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestForSlowResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestForSlowResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestForSlowResponse::GetClassData() const { return &_class_data_; }


void RequestForSlowResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestForSlowResponse*>(&to_msg);
  auto& from = static_cast<const RequestForSlowResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TestTask.Messages.RequestForSlowResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_time_in_seconds_to_sleep()) {
    _this->_internal_set_time_in_seconds_to_sleep(from._internal_time_in_seconds_to_sleep());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestForSlowResponse::CopyFrom(const RequestForSlowResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TestTask.Messages.RequestForSlowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestForSlowResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void RequestForSlowResponse::InternalSwap(RequestForSlowResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.time_in_seconds_to_sleep_, other->_impl_.time_in_seconds_to_sleep_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestForSlowResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Messages
}  // namespace TestTask
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TestTask::Messages::WrapperMessage*
Arena::CreateMaybeMessage< ::TestTask::Messages::WrapperMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TestTask::Messages::WrapperMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::TestTask::Messages::FastResponse*
Arena::CreateMaybeMessage< ::TestTask::Messages::FastResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TestTask::Messages::FastResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::TestTask::Messages::SlowResponse*
Arena::CreateMaybeMessage< ::TestTask::Messages::SlowResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TestTask::Messages::SlowResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::TestTask::Messages::RequestForFastResponse*
Arena::CreateMaybeMessage< ::TestTask::Messages::RequestForFastResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TestTask::Messages::RequestForFastResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::TestTask::Messages::RequestForSlowResponse*
Arena::CreateMaybeMessage< ::TestTask::Messages::RequestForSlowResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TestTask::Messages::RequestForSlowResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
